// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.SubjectState;
import com.labsynch.labseer.domain.SubjectValue;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SubjectValue_Roo_Finder {
    
    public static Long SubjectValue.countFindSubjectValuesByCodeValueEquals(String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SubjectValue AS o WHERE o.codeValue = :codeValue", Long.class);
        q.setParameter("codeValue", codeValue);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SubjectValue.countFindSubjectValuesByIgnoredNotAndCodeValueEquals(boolean ignored, String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SubjectValue AS o WHERE o.ignored IS NOT :ignored  AND o.codeValue = :codeValue", Long.class);
        q.setParameter("ignored", ignored);
        q.setParameter("codeValue", codeValue);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SubjectValue.countFindSubjectValuesByLsState(SubjectState lsState) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SubjectValue AS o WHERE o.lsState = :lsState", Long.class);
        q.setParameter("lsState", lsState);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SubjectValue.countFindSubjectValuesByLsStateAndLsTypeEqualsAndLsKindEquals(SubjectState lsState, String lsType, String lsKind) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SubjectValue AS o WHERE o.lsState = :lsState AND o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("lsState", lsState);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SubjectValue.countFindSubjectValuesByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SubjectValue AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByCodeValueEquals(String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery<SubjectValue> q = em.createQuery("SELECT o FROM SubjectValue AS o WHERE o.codeValue = :codeValue", SubjectValue.class);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByCodeValueEquals(String codeValue, String sortFieldName, String sortOrder) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SubjectValue AS o WHERE o.codeValue = :codeValue");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SubjectValue> q = em.createQuery(queryBuilder.toString(), SubjectValue.class);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByIgnoredNotAndCodeValueEquals(boolean ignored, String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery<SubjectValue> q = em.createQuery("SELECT o FROM SubjectValue AS o WHERE o.ignored IS NOT :ignored  AND o.codeValue = :codeValue", SubjectValue.class);
        q.setParameter("ignored", ignored);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByIgnoredNotAndCodeValueEquals(boolean ignored, String codeValue, String sortFieldName, String sortOrder) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = SubjectValue.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SubjectValue AS o WHERE o.ignored IS NOT :ignored  AND o.codeValue = :codeValue");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SubjectValue> q = em.createQuery(queryBuilder.toString(), SubjectValue.class);
        q.setParameter("ignored", ignored);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsState(SubjectState lsState) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery<SubjectValue> q = em.createQuery("SELECT o FROM SubjectValue AS o WHERE o.lsState = :lsState", SubjectValue.class);
        q.setParameter("lsState", lsState);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsState(SubjectState lsState, String sortFieldName, String sortOrder) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        EntityManager em = SubjectValue.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SubjectValue AS o WHERE o.lsState = :lsState");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SubjectValue> q = em.createQuery(queryBuilder.toString(), SubjectValue.class);
        q.setParameter("lsState", lsState);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsStateAndLsTypeEqualsAndLsKindEquals(SubjectState lsState, String lsType, String lsKind) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery<SubjectValue> q = em.createQuery("SELECT o FROM SubjectValue AS o WHERE o.lsState = :lsState AND o.lsType = :lsType  AND o.lsKind = :lsKind", SubjectValue.class);
        q.setParameter("lsState", lsState);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsStateAndLsTypeEqualsAndLsKindEquals(SubjectState lsState, String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SubjectValue AS o WHERE o.lsState = :lsState AND o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SubjectValue> q = em.createQuery(queryBuilder.toString(), SubjectValue.class);
        q.setParameter("lsState", lsState);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        TypedQuery<SubjectValue> q = em.createQuery("SELECT o FROM SubjectValue AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", SubjectValue.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<SubjectValue> SubjectValue.findSubjectValuesByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SubjectValue.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SubjectValue AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SubjectValue> q = em.createQuery(queryBuilder.toString(), SubjectValue.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
}
