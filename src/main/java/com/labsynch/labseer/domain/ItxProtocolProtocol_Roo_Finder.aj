// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.ItxProtocolProtocol;
import com.labsynch.labseer.domain.Protocol;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ItxProtocolProtocol_Roo_Finder {
    
    public static Long ItxProtocolProtocol.countFindItxProtocolProtocolsByFirstProtocol(Protocol firstProtocol) {
        if (firstProtocol == null) throw new IllegalArgumentException("The firstProtocol argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ItxProtocolProtocol AS o WHERE o.firstProtocol = :firstProtocol", Long.class);
        q.setParameter("firstProtocol", firstProtocol);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ItxProtocolProtocol.countFindItxProtocolProtocolsByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ItxProtocolProtocol AS o WHERE o.lsTransaction = :lsTransaction", Long.class);
        q.setParameter("lsTransaction", lsTransaction);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ItxProtocolProtocol.countFindItxProtocolProtocolsBySecondProtocol(Protocol secondProtocol) {
        if (secondProtocol == null) throw new IllegalArgumentException("The secondProtocol argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ItxProtocolProtocol AS o WHERE o.secondProtocol = :secondProtocol", Long.class);
        q.setParameter("secondProtocol", secondProtocol);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ItxProtocolProtocol> ItxProtocolProtocol.findItxProtocolProtocolsByFirstProtocol(Protocol firstProtocol, String sortFieldName, String sortOrder) {
        if (firstProtocol == null) throw new IllegalArgumentException("The firstProtocol argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ItxProtocolProtocol AS o WHERE o.firstProtocol = :firstProtocol");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ItxProtocolProtocol> q = em.createQuery(queryBuilder.toString(), ItxProtocolProtocol.class);
        q.setParameter("firstProtocol", firstProtocol);
        return q;
    }
    
    public static TypedQuery<ItxProtocolProtocol> ItxProtocolProtocol.findItxProtocolProtocolsByLsTransactionEquals(Long lsTransaction, String sortFieldName, String sortOrder) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ItxProtocolProtocol AS o WHERE o.lsTransaction = :lsTransaction");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ItxProtocolProtocol> q = em.createQuery(queryBuilder.toString(), ItxProtocolProtocol.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<ItxProtocolProtocol> ItxProtocolProtocol.findItxProtocolProtocolsBySecondProtocol(Protocol secondProtocol, String sortFieldName, String sortOrder) {
        if (secondProtocol == null) throw new IllegalArgumentException("The secondProtocol argument is required");
        EntityManager em = ItxProtocolProtocol.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ItxProtocolProtocol AS o WHERE o.secondProtocol = :secondProtocol");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ItxProtocolProtocol> q = em.createQuery(queryBuilder.toString(), ItxProtocolProtocol.class);
        q.setParameter("secondProtocol", secondProtocol);
        return q;
    }
    
}
