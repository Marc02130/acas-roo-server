// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.AbstractThing;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AbstractThing_Roo_Jpa_ActiveRecord {
    
    public static final List<String> AbstractThing.fieldNames4OrderClauseFilter = java.util.Arrays.asList("id", "version", "lsType", "lsKind", "lsTypeAndKind", "codeName", "recordedBy", "recordedDate", "modifiedBy", "modifiedDate", "ignored", "deleted", "lsTransaction", "thingPage", "entityManager");
    
    public static List<AbstractThing> AbstractThing.findAllAbstractThings(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractThing o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractThing.class).getResultList();
    }
    
    public static List<AbstractThing> AbstractThing.findAbstractThingEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractThing o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractThing.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AbstractThing.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AbstractThing.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
}
