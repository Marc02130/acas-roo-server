// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.AbstractValue;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AbstractValue_Roo_Jpa_ActiveRecord {
    
    public static final List<String> AbstractValue.fieldNames4OrderClauseFilter = java.util.Arrays.asList("lsType", "lsKind", "lsTypeAndKind", "codeOrigin", "codeType", "codeKind", "codeTypeAndKind", "stringValue", "codeValue", "fileValue", "urlValue", "dateValue", "clobValue", "blobValue", "operatorType", "operatorKind", "operatorTypeAndKind", "numericValue", "sigFigs", "uncertainty", "numberOfReplicates", "uncertaintyType", "unitType", "unitKind", "unitTypeAndKind", "concentration", "concUnit", "comments", "ignored", "deleted", "lsTransaction", "recordedDate", "recordedBy", "modifiedDate", "modifiedBy", "publicData", "id", "entityManager");
    
    public static long AbstractValue.countAbstractValues() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AbstractValue o", Long.class).getSingleResult();
    }
    
    public static List<AbstractValue> AbstractValue.findAllAbstractValues() {
        return entityManager().createQuery("SELECT o FROM AbstractValue o", AbstractValue.class).getResultList();
    }
    
    public static List<AbstractValue> AbstractValue.findAllAbstractValues(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractValue o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractValue.class).getResultList();
    }
    
    public static AbstractValue AbstractValue.findAbstractValue(Long id) {
        if (id == null) return null;
        return entityManager().find(AbstractValue.class, id);
    }
    
    public static List<AbstractValue> AbstractValue.findAbstractValueEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AbstractValue o", AbstractValue.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<AbstractValue> AbstractValue.findAbstractValueEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractValue o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractValue.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AbstractValue.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AbstractValue attached = AbstractValue.findAbstractValue(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AbstractValue.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AbstractValue.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
}
