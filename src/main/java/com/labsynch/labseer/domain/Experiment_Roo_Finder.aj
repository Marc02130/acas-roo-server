// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Experiment;
import com.labsynch.labseer.domain.Protocol;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Experiment_Roo_Finder {
    
    public static Long Experiment.countFindExperimentsByCodeNameEquals(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.codeName = :codeName", Long.class);
        q.setParameter("codeName", codeName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByCodeNameLike(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        codeName = codeName.replace('*', '%');
        if (codeName.charAt(0) != '%') {
            codeName = "%" + codeName;
        }
        if (codeName.charAt(codeName.length() - 1) != '%') {
            codeName = codeName + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE LOWER(o.codeName) LIKE LOWER(:codeName)", Long.class);
        q.setParameter("codeName", codeName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsKindEquals(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.lsKind = :lsKind", Long.class);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsKindLike(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        lsKind = lsKind.replace('*', '%');
        if (lsKind.charAt(0) != '%') {
            lsKind = "%" + lsKind;
        }
        if (lsKind.charAt(lsKind.length() - 1) != '%') {
            lsKind = lsKind + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE LOWER(o.lsKind) LIKE LOWER(:lsKind)", Long.class);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsTransaction(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.lsTransaction = :lsTransaction", Long.class);
        q.setParameter("lsTransaction", lsTransaction);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsTypeEquals(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.lsType = :lsType", Long.class);
        q.setParameter("lsType", lsType);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByLsTypeLike(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        lsType = lsType.replace('*', '%');
        if (lsType.charAt(0) != '%') {
            lsType = "%" + lsType;
        }
        if (lsType.charAt(lsType.length() - 1) != '%') {
            lsType = lsType + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE LOWER(o.lsType) LIKE LOWER(:lsType)", Long.class);
        q.setParameter("lsType", lsType);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByProtocol(Protocol protocol) {
        if (protocol == null) throw new IllegalArgumentException("The protocol argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE o.protocol = :protocol", Long.class);
        q.setParameter("protocol", protocol);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Experiment.countFindExperimentsByRecordedByLike(String recordedBy) {
        if (recordedBy == null || recordedBy.length() == 0) throw new IllegalArgumentException("The recordedBy argument is required");
        recordedBy = recordedBy.replace('*', '%');
        if (recordedBy.charAt(0) != '%') {
            recordedBy = "%" + recordedBy;
        }
        if (recordedBy.charAt(recordedBy.length() - 1) != '%') {
            recordedBy = recordedBy + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiment AS o WHERE LOWER(o.recordedBy) LIKE LOWER(:recordedBy)", Long.class);
        q.setParameter("recordedBy", recordedBy);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByCodeNameEquals(String codeName, String sortFieldName, String sortOrder) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.codeName = :codeName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByCodeNameLike(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        codeName = codeName.replace('*', '%');
        if (codeName.charAt(0) != '%') {
            codeName = "%" + codeName;
        }
        if (codeName.charAt(codeName.length() - 1) != '%') {
            codeName = codeName + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE LOWER(o.codeName) LIKE LOWER(:codeName)", Experiment.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByCodeNameLike(String codeName, String sortFieldName, String sortOrder) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        codeName = codeName.replace('*', '%');
        if (codeName.charAt(0) != '%') {
            codeName = "%" + codeName;
        }
        if (codeName.charAt(codeName.length() - 1) != '%') {
            codeName = codeName + "%";
        }
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE LOWER(o.codeName) LIKE LOWER(:codeName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsKindEquals(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE o.lsKind = :lsKind", Experiment.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsKindEquals(String lsKind, String sortFieldName, String sortOrder) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsKindLike(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        lsKind = lsKind.replace('*', '%');
        if (lsKind.charAt(0) != '%') {
            lsKind = "%" + lsKind;
        }
        if (lsKind.charAt(lsKind.length() - 1) != '%') {
            lsKind = lsKind + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE LOWER(o.lsKind) LIKE LOWER(:lsKind)", Experiment.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsKindLike(String lsKind, String sortFieldName, String sortOrder) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        lsKind = lsKind.replace('*', '%');
        if (lsKind.charAt(0) != '%') {
            lsKind = "%" + lsKind;
        }
        if (lsKind.charAt(lsKind.length() - 1) != '%') {
            lsKind = lsKind + "%";
        }
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE LOWER(o.lsKind) LIKE LOWER(:lsKind)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTransaction(Long lsTransaction, String sortFieldName, String sortOrder) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.lsTransaction = :lsTransaction");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeEquals(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE o.lsType = :lsType", Experiment.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeEquals(String lsType, String sortFieldName, String sortOrder) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.lsType = :lsType");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", Experiment.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeLike(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        lsType = lsType.replace('*', '%');
        if (lsType.charAt(0) != '%') {
            lsType = "%" + lsType;
        }
        if (lsType.charAt(lsType.length() - 1) != '%') {
            lsType = lsType + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE LOWER(o.lsType) LIKE LOWER(:lsType)", Experiment.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByLsTypeLike(String lsType, String sortFieldName, String sortOrder) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        lsType = lsType.replace('*', '%');
        if (lsType.charAt(0) != '%') {
            lsType = "%" + lsType;
        }
        if (lsType.charAt(lsType.length() - 1) != '%') {
            lsType = lsType + "%";
        }
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE LOWER(o.lsType) LIKE LOWER(:lsType)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByProtocol(Protocol protocol, String sortFieldName, String sortOrder) {
        if (protocol == null) throw new IllegalArgumentException("The protocol argument is required");
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE o.protocol = :protocol");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("protocol", protocol);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByRecordedByLike(String recordedBy) {
        if (recordedBy == null || recordedBy.length() == 0) throw new IllegalArgumentException("The recordedBy argument is required");
        recordedBy = recordedBy.replace('*', '%');
        if (recordedBy.charAt(0) != '%') {
            recordedBy = "%" + recordedBy;
        }
        if (recordedBy.charAt(recordedBy.length() - 1) != '%') {
            recordedBy = recordedBy + "%";
        }
        EntityManager em = Experiment.entityManager();
        TypedQuery<Experiment> q = em.createQuery("SELECT o FROM Experiment AS o WHERE LOWER(o.recordedBy) LIKE LOWER(:recordedBy)", Experiment.class);
        q.setParameter("recordedBy", recordedBy);
        return q;
    }
    
    public static TypedQuery<Experiment> Experiment.findExperimentsByRecordedByLike(String recordedBy, String sortFieldName, String sortOrder) {
        if (recordedBy == null || recordedBy.length() == 0) throw new IllegalArgumentException("The recordedBy argument is required");
        recordedBy = recordedBy.replace('*', '%');
        if (recordedBy.charAt(0) != '%') {
            recordedBy = "%" + recordedBy;
        }
        if (recordedBy.charAt(recordedBy.length() - 1) != '%') {
            recordedBy = recordedBy + "%";
        }
        EntityManager em = Experiment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiment AS o WHERE LOWER(o.recordedBy) LIKE LOWER(:recordedBy)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiment> q = em.createQuery(queryBuilder.toString(), Experiment.class);
        q.setParameter("recordedBy", recordedBy);
        return q;
    }
    
}
