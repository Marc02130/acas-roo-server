// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.AnalysisGroup;
import com.labsynch.labseer.domain.AnalysisGroupState;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect AnalysisGroupState_Roo_Finder {
    
    public static Long AnalysisGroupState.countFindAnalysisGroupStatesByAnalysisGroup(AnalysisGroup analysisGroup) {
        if (analysisGroup == null) throw new IllegalArgumentException("The analysisGroup argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AnalysisGroupState AS o WHERE o.analysisGroup = :analysisGroup", Long.class);
        q.setParameter("analysisGroup", analysisGroup);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AnalysisGroupState.countFindAnalysisGroupStatesByAnalysisGroupAndLsTypeEqualsAndLsKindEqualsAndIgnoredNot(AnalysisGroup analysisGroup, String lsType, String lsKind, boolean ignored) {
        if (analysisGroup == null) throw new IllegalArgumentException("The analysisGroup argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AnalysisGroupState AS o WHERE o.analysisGroup = :analysisGroup AND o.lsType = :lsType  AND o.lsKind = :lsKind  AND o.ignored IS NOT :ignored", Long.class);
        q.setParameter("analysisGroup", analysisGroup);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        q.setParameter("ignored", ignored);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AnalysisGroupState.countFindAnalysisGroupStatesByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AnalysisGroupState AS o WHERE o.lsTransaction = :lsTransaction", Long.class);
        q.setParameter("lsTransaction", lsTransaction);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AnalysisGroupState.countFindAnalysisGroupStatesByLsTypeAndKindEquals(String lsTypeAndKind) {
        if (lsTypeAndKind == null || lsTypeAndKind.length() == 0) throw new IllegalArgumentException("The lsTypeAndKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AnalysisGroupState AS o WHERE o.lsTypeAndKind = :lsTypeAndKind", Long.class);
        q.setParameter("lsTypeAndKind", lsTypeAndKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AnalysisGroupState.countFindAnalysisGroupStatesByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AnalysisGroupState AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByAnalysisGroup(AnalysisGroup analysisGroup) {
        if (analysisGroup == null) throw new IllegalArgumentException("The analysisGroup argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery<AnalysisGroupState> q = em.createQuery("SELECT o FROM AnalysisGroupState AS o WHERE o.analysisGroup = :analysisGroup", AnalysisGroupState.class);
        q.setParameter("analysisGroup", analysisGroup);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByAnalysisGroup(AnalysisGroup analysisGroup, String sortFieldName, String sortOrder) {
        if (analysisGroup == null) throw new IllegalArgumentException("The analysisGroup argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AnalysisGroupState AS o WHERE o.analysisGroup = :analysisGroup");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AnalysisGroupState> q = em.createQuery(queryBuilder.toString(), AnalysisGroupState.class);
        q.setParameter("analysisGroup", analysisGroup);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByAnalysisGroupAndLsTypeEqualsAndLsKindEqualsAndIgnoredNot(AnalysisGroup analysisGroup, String lsType, String lsKind, boolean ignored, String sortFieldName, String sortOrder) {
        if (analysisGroup == null) throw new IllegalArgumentException("The analysisGroup argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AnalysisGroupState AS o WHERE o.analysisGroup = :analysisGroup AND o.lsType = :lsType  AND o.lsKind = :lsKind  AND o.ignored IS NOT :ignored");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AnalysisGroupState> q = em.createQuery(queryBuilder.toString(), AnalysisGroupState.class);
        q.setParameter("analysisGroup", analysisGroup);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        q.setParameter("ignored", ignored);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        TypedQuery<AnalysisGroupState> q = em.createQuery("SELECT o FROM AnalysisGroupState AS o WHERE o.lsTransaction = :lsTransaction", AnalysisGroupState.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByLsTransactionEquals(Long lsTransaction, String sortFieldName, String sortOrder) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AnalysisGroupState AS o WHERE o.lsTransaction = :lsTransaction");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AnalysisGroupState> q = em.createQuery(queryBuilder.toString(), AnalysisGroupState.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByLsTypeAndKindEquals(String lsTypeAndKind, String sortFieldName, String sortOrder) {
        if (lsTypeAndKind == null || lsTypeAndKind.length() == 0) throw new IllegalArgumentException("The lsTypeAndKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AnalysisGroupState AS o WHERE o.lsTypeAndKind = :lsTypeAndKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AnalysisGroupState> q = em.createQuery(queryBuilder.toString(), AnalysisGroupState.class);
        q.setParameter("lsTypeAndKind", lsTypeAndKind);
        return q;
    }
    
    public static TypedQuery<AnalysisGroupState> AnalysisGroupState.findAnalysisGroupStatesByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = AnalysisGroupState.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AnalysisGroupState AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AnalysisGroupState> q = em.createQuery(queryBuilder.toString(), AnalysisGroupState.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
}
