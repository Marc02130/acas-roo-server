// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.ContainerKind;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ContainerKind_Roo_Jpa_ActiveRecord {
    
    public static final List<String> ContainerKind.fieldNames4OrderClauseFilter = java.util.Arrays.asList("lsType", "kindName", "lsTypeAndKind", "entityManager");
    
    public static long ContainerKind.countContainerKinds() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ContainerKind o", Long.class).getSingleResult();
    }
    
    public static List<ContainerKind> ContainerKind.findAllContainerKinds() {
        return entityManager().createQuery("SELECT o FROM ContainerKind o", ContainerKind.class).getResultList();
    }
    
    public static List<ContainerKind> ContainerKind.findAllContainerKinds(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM ContainerKind o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, ContainerKind.class).getResultList();
    }
    
    public static ContainerKind ContainerKind.findContainerKind(Long id) {
        if (id == null) return null;
        return entityManager().find(ContainerKind.class, id);
    }
    
    public static List<ContainerKind> ContainerKind.findContainerKindEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ContainerKind o", ContainerKind.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<ContainerKind> ContainerKind.findContainerKindEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM ContainerKind o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, ContainerKind.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void ContainerKind.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ContainerKind attached = ContainerKind.findContainerKind(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ContainerKind.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ContainerKind.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
}
