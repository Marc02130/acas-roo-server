// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Protocol;
import com.labsynch.labseer.domain.ProtocolLabel;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ProtocolLabel_Roo_Finder {
    
    public static Long ProtocolLabel.countFindProtocolLabelsByLabelTextEqualsAndIgnoredNot(String labelText, boolean ignored) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProtocolLabel AS o WHERE o.labelText = :labelText  AND o.ignored IS NOT :ignored", Long.class);
        q.setParameter("labelText", labelText);
        q.setParameter("ignored", ignored);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProtocolLabel.countFindProtocolLabelsByLabelTextLike(String labelText) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        labelText = labelText.replace('*', '%');
        if (labelText.charAt(0) != '%') {
            labelText = "%" + labelText;
        }
        if (labelText.charAt(labelText.length() - 1) != '%') {
            labelText = labelText + "%";
        }
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProtocolLabel AS o WHERE LOWER(o.labelText) LIKE LOWER(:labelText)", Long.class);
        q.setParameter("labelText", labelText);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProtocolLabel.countFindProtocolLabelsByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProtocolLabel AS o WHERE o.lsTransaction = :lsTransaction", Long.class);
        q.setParameter("lsTransaction", lsTransaction);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProtocolLabel.countFindProtocolLabelsByProtocol(Protocol protocol) {
        if (protocol == null) throw new IllegalArgumentException("The protocol argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProtocolLabel AS o WHERE o.protocol = :protocol", Long.class);
        q.setParameter("protocol", protocol);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLabelTextEqualsAndIgnoredNot(String labelText, boolean ignored) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery<ProtocolLabel> q = em.createQuery("SELECT o FROM ProtocolLabel AS o WHERE o.labelText = :labelText  AND o.ignored IS NOT :ignored", ProtocolLabel.class);
        q.setParameter("labelText", labelText);
        q.setParameter("ignored", ignored);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLabelTextEqualsAndIgnoredNot(String labelText, boolean ignored, String sortFieldName, String sortOrder) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ProtocolLabel AS o WHERE o.labelText = :labelText  AND o.ignored IS NOT :ignored");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ProtocolLabel> q = em.createQuery(queryBuilder.toString(), ProtocolLabel.class);
        q.setParameter("labelText", labelText);
        q.setParameter("ignored", ignored);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLabelTextLike(String labelText) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        labelText = labelText.replace('*', '%');
        if (labelText.charAt(0) != '%') {
            labelText = "%" + labelText;
        }
        if (labelText.charAt(labelText.length() - 1) != '%') {
            labelText = labelText + "%";
        }
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery<ProtocolLabel> q = em.createQuery("SELECT o FROM ProtocolLabel AS o WHERE LOWER(o.labelText) LIKE LOWER(:labelText)", ProtocolLabel.class);
        q.setParameter("labelText", labelText);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLabelTextLike(String labelText, String sortFieldName, String sortOrder) {
        if (labelText == null || labelText.length() == 0) throw new IllegalArgumentException("The labelText argument is required");
        labelText = labelText.replace('*', '%');
        if (labelText.charAt(0) != '%') {
            labelText = "%" + labelText;
        }
        if (labelText.charAt(labelText.length() - 1) != '%') {
            labelText = labelText + "%";
        }
        EntityManager em = ProtocolLabel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ProtocolLabel AS o WHERE LOWER(o.labelText) LIKE LOWER(:labelText)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ProtocolLabel> q = em.createQuery(queryBuilder.toString(), ProtocolLabel.class);
        q.setParameter("labelText", labelText);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery<ProtocolLabel> q = em.createQuery("SELECT o FROM ProtocolLabel AS o WHERE o.lsTransaction = :lsTransaction", ProtocolLabel.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByLsTransactionEquals(Long lsTransaction, String sortFieldName, String sortOrder) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ProtocolLabel AS o WHERE o.lsTransaction = :lsTransaction");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ProtocolLabel> q = em.createQuery(queryBuilder.toString(), ProtocolLabel.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByProtocol(Protocol protocol) {
        if (protocol == null) throw new IllegalArgumentException("The protocol argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        TypedQuery<ProtocolLabel> q = em.createQuery("SELECT o FROM ProtocolLabel AS o WHERE o.protocol = :protocol", ProtocolLabel.class);
        q.setParameter("protocol", protocol);
        return q;
    }
    
    public static TypedQuery<ProtocolLabel> ProtocolLabel.findProtocolLabelsByProtocol(Protocol protocol, String sortFieldName, String sortOrder) {
        if (protocol == null) throw new IllegalArgumentException("The protocol argument is required");
        EntityManager em = ProtocolLabel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ProtocolLabel AS o WHERE o.protocol = :protocol");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ProtocolLabel> q = em.createQuery(queryBuilder.toString(), ProtocolLabel.class);
        q.setParameter("protocol", protocol);
        return q;
    }
    
}
