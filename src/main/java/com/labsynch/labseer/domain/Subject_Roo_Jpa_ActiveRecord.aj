// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Subject;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Subject_Roo_Jpa_ActiveRecord {
    
    public static final List<String> Subject.fieldNames4OrderClauseFilter = java.util.Arrays.asList("logger", "treatmentGroups", "lsLabels", "lsStates", "containers");
    
    public static long Subject.countSubjects() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Subject o", Long.class).getSingleResult();
    }
    
    public static List<Subject> Subject.findAllSubjects() {
        return entityManager().createQuery("SELECT o FROM Subject o", Subject.class).getResultList();
    }
    
    public static List<Subject> Subject.findAllSubjects(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Subject o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Subject.class).getResultList();
    }
    
    public static Subject Subject.findSubject(Long id) {
        if (id == null) return null;
        return entityManager().find(Subject.class, id);
    }
    
    public static List<Subject> Subject.findSubjectEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Subject o", Subject.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Subject> Subject.findSubjectEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Subject o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Subject.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public Subject Subject.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Subject merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
