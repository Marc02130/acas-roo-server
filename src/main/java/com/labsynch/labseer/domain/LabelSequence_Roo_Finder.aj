// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.LabelSequence;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LabelSequence_Roo_Finder {
    
    public static TypedQuery<LabelSequence> LabelSequence.findLabelSequencesByLabelTypeAndKindEquals(String labelTypeAndKind) {
        if (labelTypeAndKind == null || labelTypeAndKind.length() == 0) throw new IllegalArgumentException("The labelTypeAndKind argument is required");
        EntityManager em = LabelSequence.entityManager();
        TypedQuery<LabelSequence> q = em.createQuery("SELECT o FROM LabelSequence AS o WHERE o.labelTypeAndKind = :labelTypeAndKind", LabelSequence.class);
        q.setParameter("labelTypeAndKind", labelTypeAndKind);
        return q;
    }
    
    public static TypedQuery<LabelSequence> LabelSequence.findLabelSequencesByThingTypeAndKindEquals(String thingTypeAndKind) {
        if (thingTypeAndKind == null || thingTypeAndKind.length() == 0) throw new IllegalArgumentException("The thingTypeAndKind argument is required");
        EntityManager em = LabelSequence.entityManager();
        TypedQuery<LabelSequence> q = em.createQuery("SELECT o FROM LabelSequence AS o WHERE o.thingTypeAndKind = :thingTypeAndKind", LabelSequence.class);
        q.setParameter("thingTypeAndKind", thingTypeAndKind);
        return q;
    }
    
    public static TypedQuery<LabelSequence> LabelSequence.findLabelSequencesByThingTypeAndKindEqualsAndLabelTypeAndKindEquals(String thingTypeAndKind, String labelTypeAndKind) {
        if (thingTypeAndKind == null || thingTypeAndKind.length() == 0) throw new IllegalArgumentException("The thingTypeAndKind argument is required");
        if (labelTypeAndKind == null || labelTypeAndKind.length() == 0) throw new IllegalArgumentException("The labelTypeAndKind argument is required");
        EntityManager em = LabelSequence.entityManager();
        TypedQuery<LabelSequence> q = em.createQuery("SELECT o FROM LabelSequence AS o WHERE o.thingTypeAndKind = :thingTypeAndKind  AND o.labelTypeAndKind = :labelTypeAndKind", LabelSequence.class);
        q.setParameter("thingTypeAndKind", thingTypeAndKind);
        q.setParameter("labelTypeAndKind", labelTypeAndKind);
        return q;
    }
    
    public static TypedQuery<LabelSequence> LabelSequence.findLabelSequencesByThingTypeAndKindEqualsAndLabelTypeAndKindEqualsAndLabelPrefixEquals(String thingTypeAndKind, String labelTypeAndKind, String labelPrefix) {
        if (thingTypeAndKind == null || thingTypeAndKind.length() == 0) throw new IllegalArgumentException("The thingTypeAndKind argument is required");
        if (labelTypeAndKind == null || labelTypeAndKind.length() == 0) throw new IllegalArgumentException("The labelTypeAndKind argument is required");
        if (labelPrefix == null || labelPrefix.length() == 0) throw new IllegalArgumentException("The labelPrefix argument is required");
        EntityManager em = LabelSequence.entityManager();
        TypedQuery<LabelSequence> q = em.createQuery("SELECT o FROM LabelSequence AS o WHERE o.thingTypeAndKind = :thingTypeAndKind  AND o.labelTypeAndKind = :labelTypeAndKind  AND o.labelPrefix = :labelPrefix", LabelSequence.class);
        q.setParameter("thingTypeAndKind", thingTypeAndKind);
        q.setParameter("labelTypeAndKind", labelTypeAndKind);
        q.setParameter("labelPrefix", labelPrefix);
        return q;
    }
    
}
