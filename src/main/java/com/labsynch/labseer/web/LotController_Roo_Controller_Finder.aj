// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.BulkLoadFile;
import com.labsynch.labseer.domain.Lot;
import com.labsynch.labseer.domain.SaltForm;
import com.labsynch.labseer.web.LotController;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect LotController_Roo_Controller_Finder {
    
    @RequestMapping(params = "find=ByBuid", method = RequestMethod.GET)
    public String LotController.findLotsByBuid(@RequestParam("buid") Long buid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByBuid(buid, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByBuid(buid) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByBuid(buid, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = { "find=ByBulkLoadFileEquals", "form" }, method = RequestMethod.GET)
    public String LotController.findLotsByBulkLoadFileEqualsForm(Model uiModel) {
        uiModel.addAttribute("bulkloadfiles", BulkLoadFile.findAllBulkLoadFiles());
        return "lots/findLotsByBulkLoadFileEquals";
    }
    
    @RequestMapping(params = "find=ByBulkLoadFileEquals", method = RequestMethod.GET)
    public String LotController.findLotsByBulkLoadFileEquals(@RequestParam("bulkLoadFile") BulkLoadFile bulkLoadFile, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByBulkLoadFileEquals(bulkLoadFile, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByBulkLoadFileEquals(bulkLoadFile) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByBulkLoadFileEquals(bulkLoadFile, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByChemistAndSynthesisDateBetween", method = RequestMethod.GET)
    public String LotController.findLotsByChemistAndSynthesisDateBetween(@RequestParam("chemist") String chemist, @RequestParam("minSynthesisDate") @DateTimeFormat(style = "S-") Date minSynthesisDate, @RequestParam("maxSynthesisDate") @DateTimeFormat(style = "S-") Date maxSynthesisDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByChemistAndSynthesisDateBetween(chemist, minSynthesisDate, maxSynthesisDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByChemistAndSynthesisDateBetween(chemist, minSynthesisDate, maxSynthesisDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByChemistAndSynthesisDateBetween(chemist, minSynthesisDate, maxSynthesisDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByCorpNameEquals", method = RequestMethod.GET)
    public String LotController.findLotsByCorpNameEquals(@RequestParam("corpName") String corpName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByCorpNameEquals(corpName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByCorpNameEquals(corpName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByCorpNameEquals(corpName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByCorpNameLike", method = RequestMethod.GET)
    public String LotController.findLotsByCorpNameLike(@RequestParam("corpName") String corpName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByCorpNameLike(corpName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByCorpNameLike(corpName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByCorpNameLike(corpName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByIsVirtualNot", method = RequestMethod.GET)
    public String LotController.findLotsByIsVirtualNot(@RequestParam(value = "isVirtual", required = false) Boolean isVirtual, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByIsVirtualNot(isVirtual == null ? Boolean.FALSE : isVirtual, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByIsVirtualNot(isVirtual == null ? Boolean.FALSE : isVirtual) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByIsVirtualNot(isVirtual == null ? Boolean.FALSE : isVirtual, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByNotebookPageEquals", method = RequestMethod.GET)
    public String LotController.findLotsByNotebookPageEquals(@RequestParam("notebookPage") String notebookPage, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByNotebookPageEquals(notebookPage, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByNotebookPageEquals(notebookPage) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByNotebookPageEquals(notebookPage, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=ByNotebookPageEqualsAndIgnoreNot", method = RequestMethod.GET)
    public String LotController.findLotsByNotebookPageEqualsAndIgnoreNot(@RequestParam("notebookPage") String notebookPage, @RequestParam(value = "ignore", required = false) Boolean ignore, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsByNotebookPageEqualsAndIgnoreNot(notebookPage, ignore == null ? Boolean.FALSE : ignore, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsByNotebookPageEqualsAndIgnoreNot(notebookPage, ignore == null ? Boolean.FALSE : ignore) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsByNotebookPageEqualsAndIgnoreNot(notebookPage, ignore == null ? Boolean.FALSE : ignore, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=BySaltForm", method = RequestMethod.GET)
    public String LotController.findLotsBySaltForm(@RequestParam("saltForm") SaltForm saltForm, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsBySaltForm(saltForm, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsBySaltForm(saltForm) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsBySaltForm(saltForm, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=BySynthesisDateBetween", method = RequestMethod.GET)
    public String LotController.findLotsBySynthesisDateBetween(@RequestParam("minSynthesisDate") @DateTimeFormat(style = "S-") Date minSynthesisDate, @RequestParam("maxSynthesisDate") @DateTimeFormat(style = "S-") Date maxSynthesisDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateBetween(minSynthesisDate, maxSynthesisDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsBySynthesisDateBetween(minSynthesisDate, maxSynthesisDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateBetween(minSynthesisDate, maxSynthesisDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=BySynthesisDateGreaterThan", method = RequestMethod.GET)
    public String LotController.findLotsBySynthesisDateGreaterThan(@RequestParam("synthesisDate") @DateTimeFormat(style = "S-") Date synthesisDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateGreaterThan(synthesisDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsBySynthesisDateGreaterThan(synthesisDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateGreaterThan(synthesisDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
    @RequestMapping(params = "find=BySynthesisDateLessThan", method = RequestMethod.GET)
    public String LotController.findLotsBySynthesisDateLessThan(@RequestParam("synthesisDate") @DateTimeFormat(style = "S-") Date synthesisDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateLessThan(synthesisDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Lot.countFindLotsBySynthesisDateLessThan(synthesisDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lots", Lot.findLotsBySynthesisDateLessThan(synthesisDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "lots/list";
    }
    
}
