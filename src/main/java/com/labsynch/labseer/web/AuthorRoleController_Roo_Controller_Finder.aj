// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.Author;
import com.labsynch.labseer.domain.AuthorRole;
import com.labsynch.labseer.domain.LsRole;
import com.labsynch.labseer.web.AuthorRoleController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect AuthorRoleController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByRoleEntry", "form" }, method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByRoleEntryForm(Model uiModel) {
        uiModel.addAttribute("lsroles", LsRole.findAllLsRoles());
        return "authorroles/findAuthorRolesByRoleEntry";
    }
    
    @RequestMapping(params = "find=ByRoleEntry", method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByRoleEntry(@RequestParam("roleEntry") LsRole roleEntry, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByRoleEntry(roleEntry, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) AuthorRole.countFindAuthorRolesByRoleEntry(roleEntry) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByRoleEntry(roleEntry, sortFieldName, sortOrder).getResultList());
        }
        return "authorroles/list";
    }
    
    @RequestMapping(params = { "find=ByRoleEntryAndUserEntry", "form" }, method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByRoleEntryAndUserEntryForm(Model uiModel) {
        uiModel.addAttribute("lsroles", LsRole.findAllLsRoles());
        uiModel.addAttribute("authors", Author.findAllAuthors());
        return "authorroles/findAuthorRolesByRoleEntryAndUserEntry";
    }
    
    @RequestMapping(params = "find=ByRoleEntryAndUserEntry", method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByRoleEntryAndUserEntry(@RequestParam("roleEntry") LsRole roleEntry, @RequestParam("userEntry") Author userEntry, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByRoleEntryAndUserEntry(roleEntry, userEntry, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) AuthorRole.countFindAuthorRolesByRoleEntryAndUserEntry(roleEntry, userEntry) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByRoleEntryAndUserEntry(roleEntry, userEntry, sortFieldName, sortOrder).getResultList());
        }
        return "authorroles/list";
    }
    
    @RequestMapping(params = { "find=ByUserEntry", "form" }, method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByUserEntryForm(Model uiModel) {
        uiModel.addAttribute("authors", Author.findAllAuthors());
        return "authorroles/findAuthorRolesByUserEntry";
    }
    
    @RequestMapping(params = "find=ByUserEntry", method = RequestMethod.GET)
    public String AuthorRoleController.findAuthorRolesByUserEntry(@RequestParam("userEntry") Author userEntry, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByUserEntry(userEntry, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) AuthorRole.countFindAuthorRolesByUserEntry(userEntry) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("authorroles", AuthorRole.findAuthorRolesByUserEntry(userEntry, sortFieldName, sortOrder).getResultList());
        }
        return "authorroles/list";
    }
    
}
