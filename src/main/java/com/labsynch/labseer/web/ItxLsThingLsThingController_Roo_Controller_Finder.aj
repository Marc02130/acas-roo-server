// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.ItxLsThingLsThing;
import com.labsynch.labseer.domain.LsThing;
import com.labsynch.labseer.web.ItxLsThingLsThingController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ItxLsThingLsThingController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCodeNameEquals", "form" }, method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsByCodeNameEqualsForm(Model uiModel) {
        return "itxlsthinglsthings/findItxLsThingLsThingsByCodeNameEquals";
    }
    
    @RequestMapping(params = "find=ByCodeNameEquals", method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsByCodeNameEquals(@RequestParam("codeName") String codeName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsByCodeNameEquals(codeName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) ItxLsThingLsThing.countFindItxLsThingLsThingsByCodeNameEquals(codeName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsByCodeNameEquals(codeName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "itxlsthinglsthings/list";
    }
    
    @RequestMapping(params = { "find=ByFirstLsThing", "form" }, method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsByFirstLsThingForm(Model uiModel) {
        uiModel.addAttribute("lsthings", LsThing.findAllLsThings());
        return "itxlsthinglsthings/findItxLsThingLsThingsByFirstLsThing";
    }
    
    @RequestMapping(params = "find=ByFirstLsThing", method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsByFirstLsThing(@RequestParam("firstLsThing") LsThing firstLsThing, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsByFirstLsThing(firstLsThing, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) ItxLsThingLsThing.countFindItxLsThingLsThingsByFirstLsThing(firstLsThing) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsByFirstLsThing(firstLsThing, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "itxlsthinglsthings/list";
    }
    
    @RequestMapping(params = { "find=BySecondLsThing", "form" }, method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsBySecondLsThingForm(Model uiModel) {
        uiModel.addAttribute("lsthings", LsThing.findAllLsThings());
        return "itxlsthinglsthings/findItxLsThingLsThingsBySecondLsThing";
    }
    
    @RequestMapping(params = "find=BySecondLsThing", method = RequestMethod.GET)
    public String ItxLsThingLsThingController.findItxLsThingLsThingsBySecondLsThing(@RequestParam("secondLsThing") LsThing secondLsThing, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsBySecondLsThing(secondLsThing, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) ItxLsThingLsThing.countFindItxLsThingLsThingsBySecondLsThing(secondLsThing) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("itxlsthinglsthings", ItxLsThingLsThing.findItxLsThingLsThingsBySecondLsThing(secondLsThing, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "itxlsthinglsthings/list";
    }
    
}
