// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.DDictValue;
import com.labsynch.labseer.web.DDictValueController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect DDictValueController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCodeNameEquals", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByCodeNameEqualsForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByCodeNameEquals";
    }
    
    @RequestMapping(params = "find=ByCodeNameEquals", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByCodeNameEquals(@RequestParam("codeName") String codeName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByCodeNameEquals(codeName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByCodeNameEquals(codeName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByCodeNameEquals(codeName, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByIgnoredNot", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByIgnoredNotForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByIgnoredNot";
    }
    
    @RequestMapping(params = "find=ByIgnoredNot", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByIgnoredNot(@RequestParam(value = "ignored", required = false) boolean ignored, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByIgnoredNot(ignored, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByIgnoredNot(ignored) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByIgnoredNot(ignored, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLabelTextLike", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLabelTextLikeForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByLabelTextLike";
    }
    
    @RequestMapping(params = "find=ByLabelTextLike", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLabelTextLike(@RequestParam("labelText") String labelText, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLabelTextLike(labelText, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByLabelTextLike(labelText) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLabelTextLike(labelText, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsKindEquals", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsKindEqualsForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByLsKindEquals";
    }
    
    @RequestMapping(params = "find=ByLsKindEquals", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsKindEquals(@RequestParam("lsKind") String lsKind, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsKindEquals(lsKind, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByLsKindEquals(lsKind) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsKindEquals(lsKind, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEquals", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEqualsForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByLsTypeEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeEquals", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEquals(@RequestParam("lsType") String lsType, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEquals(lsType, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByLsTypeEquals(lsType) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEquals(lsType, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEqualsAndLsKindEquals", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEqualsAndLsKindEqualsForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByLsTypeEqualsAndLsKindEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeEqualsAndLsKindEquals", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEqualsAndLsKindEquals(@RequestParam("lsType") String lsType, @RequestParam("lsKind") String lsKind, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEqualsAndLsKindEquals(lsType, lsKind, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByLsTypeEqualsAndLsKindEquals(lsType, lsKind) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEqualsAndLsKindEquals(lsType, lsKind, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEqualsAndLsKindEqualsAndShortNameEquals", "form" }, method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEqualsForm(Model uiModel) {
        return "ddictvalues/findDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeEqualsAndLsKindEqualsAndShortNameEquals", method = RequestMethod.GET)
    public String DDictValueController.findDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEquals(@RequestParam("lsType") String lsType, @RequestParam("lsKind") String lsKind, @RequestParam("shortName") String shortName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEquals(lsType, lsKind, shortName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DDictValue.countFindDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEquals(lsType, lsKind, shortName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddictvalues", DDictValue.findDDictValuesByLsTypeEqualsAndLsKindEqualsAndShortNameEquals(lsType, lsKind, shortName, sortFieldName, sortOrder).getResultList());
        }
        return "ddictvalues/list";
    }
    
}
