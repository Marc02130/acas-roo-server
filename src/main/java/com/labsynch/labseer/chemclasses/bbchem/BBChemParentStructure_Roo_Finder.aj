// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.chemclasses.bbchem;

import com.labsynch.labseer.chemclasses.bbchem.BBChemParentStructure;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect BBChemParentStructure_Roo_Finder {
    
    public static Long BBChemParentStructure.countFindBBChemParentStructuresByPreRegEquals(String preReg) {
        if (preReg == null || preReg.length() == 0) throw new IllegalArgumentException("The preReg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BBChemParentStructure AS o WHERE o.preReg = :preReg", Long.class);
        q.setParameter("preReg", preReg);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BBChemParentStructure.countFindBBChemParentStructuresByRegEquals(String reg) {
        if (reg == null || reg.length() == 0) throw new IllegalArgumentException("The reg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BBChemParentStructure AS o WHERE o.reg = :reg", Long.class);
        q.setParameter("reg", reg);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<BBChemParentStructure> BBChemParentStructure.findBBChemParentStructuresByPreRegEquals(String preReg) {
        if (preReg == null || preReg.length() == 0) throw new IllegalArgumentException("The preReg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        TypedQuery<BBChemParentStructure> q = em.createQuery("SELECT o FROM BBChemParentStructure AS o WHERE o.preReg = :preReg", BBChemParentStructure.class);
        q.setParameter("preReg", preReg);
        return q;
    }
    
    public static TypedQuery<BBChemParentStructure> BBChemParentStructure.findBBChemParentStructuresByPreRegEquals(String preReg, String sortFieldName, String sortOrder) {
        if (preReg == null || preReg.length() == 0) throw new IllegalArgumentException("The preReg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM BBChemParentStructure AS o WHERE o.preReg = :preReg");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<BBChemParentStructure> q = em.createQuery(queryBuilder.toString(), BBChemParentStructure.class);
        q.setParameter("preReg", preReg);
        return q;
    }
    
    public static TypedQuery<BBChemParentStructure> BBChemParentStructure.findBBChemParentStructuresByRegEquals(String reg) {
        if (reg == null || reg.length() == 0) throw new IllegalArgumentException("The reg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        TypedQuery<BBChemParentStructure> q = em.createQuery("SELECT o FROM BBChemParentStructure AS o WHERE o.reg = :reg", BBChemParentStructure.class);
        q.setParameter("reg", reg);
        return q;
    }
    
    public static TypedQuery<BBChemParentStructure> BBChemParentStructure.findBBChemParentStructuresByRegEquals(String reg, String sortFieldName, String sortOrder) {
        if (reg == null || reg.length() == 0) throw new IllegalArgumentException("The reg argument is required");
        EntityManager em = BBChemParentStructure.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM BBChemParentStructure AS o WHERE o.reg = :reg");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<BBChemParentStructure> q = em.createQuery(queryBuilder.toString(), BBChemParentStructure.class);
        q.setParameter("reg", reg);
        return q;
    }
    
}
